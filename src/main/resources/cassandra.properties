#CASSANDRA CONNECTION DETAILS
cassandra.port=9042
cassandra.keyspace=bighalf
cassandra.nodes=ec2-52-91-64-254.compute-1.amazonaws.com,ec2-54-165-90-84.compute-1.amazonaws.com,ec2-52-91-230-234.compute-1.amazonaws.com
#cassandra.nodes=localhost
cassandra.username=
cassandra.password=
cassandra.localhost.keyspace=create keyspace if not exists BIGHALF with replication = {'class' : 'SimpleStrategy'\, 'replication_factor' : 2}
cassandra.topology.keyspace=CREATE KEYSPACE IF NOT EXISTS bighalf with replication = {'class' : 'NetworkTopologyStrategy'\, 'dc1' : 2 }
#included new column data_type to support different event types in a datasquare eg:(accounts, bills, vendor, employees)
cassandra.table.rawdata=CREATE TABLE IF NOT EXISTS bighalf.rawdata_by_day (datasquare_id text\,user_id text\, date text\, event_time text\, data text\, data_type text\, PRIMARY KEY ((datasquare_id\,user_id\,date)\,event_time\,data_type));
#cassandra.table.user.datasquare=create table if not exists bighalf.user_datasquares (company_userid text\, datasquare_id text\, properties text\, preview_data text\, primary key (company_userid\, datasquare_id));
cassandra.table.QBO.rawdata=create table if not exists bighalf.qbo_rawdata (datasquare_id text\, year text\, month int\, data_type text\, data text\, primary key((datasquare_id\, year)\,month\, data_type));
cassandra.table.user.datasquare=create table if not exists bighalf.user_datasquares (user_id text\, datasquare_id text\, properties text\, preview_data text\, refresh_rate text\, last_updated_time text\, data_range text\, datasquare_age text\, primary key (user_id\, datasquare_id));
cassandra.table.company.users=create table if not exists bighalf.company_users (company_id text\, user_id text\, user_data text\, primary key (company_id\,user_id));
cassandra.table.datasquare.credentials=create table if not exists bighalf.datasquare_credentials (datasquare_id text\, user_id text\, credentials text\, primary key (user_id\, datasquare_id));
#stores list of boards for a user
#board_properties - Json string of a board propertes(eg: board name)
cassandra.table.user.boards=CREATE TABLE IF NOT EXISTS bighalf.user_boards (user_id text\, board_id text\, board_properties text\, PRIMARY KEY (user_id\,board_id));
#for storing cards for a board along with data and format of a card -- this will help us fetch all cards for a board in a single call.
cassandra.table.board.cards = CREATE TABLE IF NOT EXISTS bighalf.board_cards (board_id text\, card_id text\, card_properties text\, card_format text\, card_data text\, card_query text\, card_refresh_rate text\, PRIMARY KEY (board_id\, card_id));
#To store card with its ID
#A new column deleted added to mark a card as deleted because Cassandra does not support row deletion  
cassandra.table.card=CREATE TABLE IF NOT EXISTS bighalf.card (card_id text primary key\, card_format text\, card_properties text\, card_data text\, card_query text\, card_refresh_rate text\,datasquare_id text\, deleted boolean);
#all the attribute names are stored as columns for a datasquare
#cassandra.table.connector.attribute.names=create table bighalf.datasquare_attribute_names (datasquare_id text\, attribute_name text\, primary key (datasquare_id\, attribute_name));
cassandra.table.user.datasquare.attributes=CREATE TABLE IF NOT EXISTS bighalf.datasquare_attributes (datasquare_id text\, attribute_name text\, attribute_type text\, attribute_display_name text\, isCurrencyAttribute boolean\, primary key (datasquare_id\, attribute_name));
#all values for a attribute are stored as columns
cassandra.table.user.datasquare.attribute.values=CREATE TABLE IF NOT EXISTS bighalf.datasquare_attribute_values (datasquare_id text\, attribute_name text\, attribute_value text\, primary key ((datasquare_id\, attribute_name)\,attribute_value));
#table to store datasquare IDs by its type
cassandra.table.datasquare.type=create table if not exists bighalf.datasquare_by_type (datasquare_type text\, datasquare_id text\,  datasquare_properties text\, primary key (datasquare_type\,datasquare_id));
#table t maintain card IDs for datasqaure
cassandra.table.datasquare.cards=create table if not exists bighalf.datasquare_cards (datasquare_id text\, card_id text\, primary key (datasquare_id\,card_id));
#Table to store bighalf user_id and datasquare_id for a datasquare user
cassandra.table.user.by.datasquare.credentials=create table if not exists bighalf.user_by_datasquare_credentials (datasquare_type text\, datasquare_user_id text\, datasquare_id text\, bighalf_user_id text\, primary key ((datasquare_type\,datasquare_user_id)\,datasquare_id));
#Table to store users for datasquare:
cassandra.table.datasquare.users=create table if not exists bighalf.datasquare_users (datasquare_id text\, user_id text\, user_data text\, primary key (datasquare_id\,user_id));
#Table to store company details:
cassandra.table.company=create table if not exists bighalf.company (company_id text primary key\, company_data text);
#Table to store Comments for a Card:
cassandra.table.card.comments=create table if not exists bighalf.card_comments(card_id text\, comment_id text\, comment text\, comment_time text\, comment_user text\, primary key(card_id\, comment_id));
#Table to store hash comments:
cassandra.table.hash.comments=create table if not exists bighalf.hash_comments(company_id text\, hash_comment_id text\, card_id text\, comment text\, comment_time text\, comment_user text\, primary key ((company_id\,hash_comment_id)\,card_id));
#Table to store the user information
cassandra.table.users=create table if not exists bighalf.users(user_id text primary key\, user_data text);
#Table to store alerts:
cassandra.table.alerts=create table if not exists bighalf.alert(alert_id text primary key\, alert_rule text\, alert_note text\, card_id text\, created_user text\, shared_users map<text\,text>);
#Table to store all the alerts for a user:
cassandra.table.user.alerts=create table if not exists bighalf.user_alerts(user_id text\, alert_id text\, card_id text\, alert_note text\, has_viewed boolean\, has_triggered boolean\, primary key(user_id\, alert_id));
#Table to fetch all the alerts for a card:
cassandra.table.card.alerts=create table if not exists bighalf.card_alerts(card_id text primary key\, alert_id text);
#Table to store boards and list of cards for a all the boards
cassandra.table.users.boards.cardslist=create table if not exists bighalf.user_boards_cards (user_id text\, board_id text\,board_name text\, cards set<text>\, primary key (user_id\,board_id));
#Table to fetch all the users for a card
cassandra.table.card.users=create table if not exists bighalf.card_users(card_id text\, user_id text\, primary key(card_id\, user_id));
#Table to Store the datasquare level external data like company etc
cassandra.table.datasquare.source=CREATE TABLE IF NOT EXISTS bighalf.datasquare_source(datasquare_id text\, source_type text\, source_data text\, PRIMARY KEY ((datasquare_id\,source_type)));
#Table to store datasquare range and age
cassandra.table.datasquare.age.range=create table if not exists bighalf.datasquare_age_range (datasquare_id text primary key\, ds_age text\, ds_range text);
#Cassandra table to maintain count of cards for a datasquare
cassandra.table.user.datasquare.cards.count=create table if not exists bighalf.user_datasquare_cards_count (user_id text\, datasquare_id text\, cards_count counter\, primary key (user_id\,datasquare_id));
#table used to store the excel data
cassandra.table.excel.rawdata=CREATE TABLE IF NOT EXISTS bighalf.excel_rawdata (datasquare_id text\, last_updated_date_time timestamp\, raw_data text\, PRIMARY KEY (datasquare_id));
#table used to store the jira data
cassandra.table.jira.rawdata=CREATE TABLE IF NOT EXISTS bighalf.jira_rawdata(datasquare_id text\, issue_json text\, user text\, projects text\, primary key(datasquare_id\, issue_id));
#new table used to store the jira data this will be replaced with jira_raw_data 
cassandra.table.jira.rawdata.new=create table if not exists bighalf.jira_rawdata_new(datasquare_id text\, issue_id text\, aggregateprogress_percent text\, aggregateprogress_progress text\, aggregateprogress_total text\, assignee_active text\, assignee_displayName text\, assignee_emailAddress text\, assignee_name text\, assignee_timeZone text\, creator_active text\, creator_displayName text\, creator_emailAddress text\, creator_name text\, creator_timeZone text\, issuetype_name text\, priority_name text\, progress_percent text\, progress_progress text\, progress_total text\, project_name text\, reporter_active text\, reporter_displayName text\, reporter_emailAddress text\, reporter_name text\, reporter_timeZone text\, status_name text\, votes_votes text\, watches_watchCount text\,primary key (datasquare_id\,issue_id));
#new table used to store the github raw data
cassandra.table.github.rawdata=create table if not exists bighalf.github_rawdata(datasquare_id text\, commit_name text\, commit_email text\, commit_date text\, fork_count text\, commit_id text\, commit_person text\, commit_date_time text\, primary key (datasquare_id));
#new table used to store the jira sprint data
cassandra.table.jira.sprint=create table if not exists bighalf.jira_sprint(datasquare_id text\, sprint_id text\,sprint_completedIssues map<text\,text>\,sprint_un_completedIssues map<text\,text>\, sprint_completedIssuesInitialEstimateSum text\, sprint_completedIssuesEstimateSum text\, sprint_issuesNotCompletedInitialEstimateSum text\, sprint_issuesNotCompletedEstimateSum text\,sprint_allIssuesEstimateSum text\,sprint_puntedIssuesInitialEstimateSum text\,sprint_puntedIssuesEstimateSum text\, sprint_name text\, sprint_state text\,sprint_linkedPagesCount text\, sprint_startDate text\, sprint_endDate text\, sprint_completeDate text\, sprint_daysRemaining text\, primary key(datasquare_id\,sprint_id));